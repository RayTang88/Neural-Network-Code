# import tensorflow as tf
#
# a = tf.constant([[[0], [1], [1]]])
# print(a)
# b = tf.squeeze(a)
# print(b)
# import tensorflow as tf
#
# a = tf.constant([[0,1], [1,0], [1,0]])
#
# b = tf.constant([[3., 4.], [1., 2.], [5., 6.]])
#
# c = tf.one_hot(a, 2)
#
# # d = c * b
# #
# # e = tf.reduce_sum(d, axis=1)
# # f = tf.expand_dims(e, axis=1)
#
# with tf.Session() as sess:
#     print('c', sess.run(c))
#     # print('d',sess.run(d))
#     # print('e',sess.run(e))
#     # print('f',sess.run(f))
import numpy as np
import torch
# values = np.logspace(-4, 2, num=100, base=10)
# print(values)
# # print(sorted(values))
# x = np.array([[3,0.5],[1,0.6] ,[2,0.4]
# print(np.argsort(-x[:,1]))
# print(x[np.argsort(-x[:,1])])
# box = np.array([[[2, 4, 3, 5, 0.9], [2.1, 4.1, 3., 5., 0.4], [5, 4, 6, 5, 0.88],
#                 [5.5, 3.5, 6.5, 4.5, 0.5], [2.8, 4.5, 3, 5, 0.3], [3.5, 1, 4.5, 2, 0.1]],
#       [[2, 4, 3, 5, 0.9], [2.1, 4.1, 3., 5., 0.4], [5, 4, 6, 5, 0.88],
#                 [5.5, 3.5, 6.5, 4.5, 0.5], [2.8, 4.5, 3, 5, 0.3], [3.5, 1, 4.5, 2, 0.1]]])
#
# box =torch.from_numpy(box)
# # print(torch.nonezero)
# print(np.where(box[:, :, 4] > 0.5))
# print(box[np.where(box[:, :, 4] > 0.5)[0],np.where(box[:, :, 4] > 0.5)[1]])
# print(np.squeeze(np.stack(np.where(box[:, :, 4] > 0.5), axis=1)))
# print(box[torch.nonzero(box[:, :, 4] > 0.5).numpy()])


try:
    1 / 0
except Exception as e:

    traceback.print_exc(e)

























































































































































































































































































































































































































































































































































































































































































































































































































